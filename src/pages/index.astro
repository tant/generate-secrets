---
import "../styles/global.css";

// SEO metadata
export const prerender = true;
---

<html lang="en" data-theme="cyberpunk">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content="A blazing fast, minimalist, and privacy-first web tool to instantly generate secure credentials for developers." />
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content="https://generate-secrets.vercel.app/" />
		<meta property="og:title" content="Generate Secrets - Instant Secure Credential Generator" />
		<meta property="og:description" content="A blazing fast, minimalist, and privacy-first web tool to instantly generate secure credentials for developers." />
		<meta property="og:image" content="https://generate-secrets.vercel.app/preview.png" />
		
		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content="https://generate-secrets.vercel.app/" />
		<meta property="twitter:title" content="Generate Secrets - Instant Secure Credential Generator" />
		<meta property="twitter:description" content="A blazing fast, minimalist, and privacy-first web tool to instantly generate secure credentials for developers." />
		<meta property="twitter:image" content="https://generate-secrets.vercel.app/preview.png" />
		
		<title>Generate Secrets - Instant Secure Credential Generator</title>
	</head>
	<body class="min-h-screen bg-base-200">
		<main class="container mx-auto px-4 py-8 flex flex-col items-center justify-center min-h-screen">
			<div class="w-full max-w-2xl bg-base-100 rounded-box shadow-xl p-6 md:p-8">
				<!-- Header -->
				<header class="text-center mb-8">
					<h1 class="text-3xl md:text-4xl font-bold mb-2">Secret Generation Tool</h1>
					<p class="text-base-content/70">Generate secure credentials for your development projects</p>
				</header>
				
				<!-- Action Buttons -->
				<div class="flex flex-col sm:flex-row gap-4 mb-8 justify-center">
					<button 
						id="generate-btn"
						class="btn btn-primary flex-1"
						aria-label="Generate new secrets"
					>
						Generate
					</button>
					<button 
						id="copy-btn"
						class="btn btn-secondary flex-1"
						aria-label="Copy all secrets to clipboard"
					>
						Copy
					</button>
				</div>
				
				<!-- Copy Confirmation Message -->
				<div id="copy-confirmation" class="alert alert-success hidden mb-4">
					<span>Copied to clipboard!</span>
				</div>
				
				<!-- Secrets List -->
				<div class="space-y-4">
					<h2 class="text-xl font-semibold mb-4">Generated Secrets</h2>
					<div id="secrets-container">
						<div class="bg-base-200 rounded-box p-6 text-center">
							<p class="text-base-content/70">Click "Generate" to create your secure credentials</p>
						</div>
					</div>
				</div>
				
				<!-- Error Message -->
				<div id="error-message" class="mt-6 hidden" role="alert" aria-live="polite">
					<div class="alert alert-error">
						<span id="error-text">Error: Something went wrong</span>
					</div>
				</div>
			</div>
		</main>
		
		<!-- Client-side script for interactivity -->
		<script>
			// Tooltip explanations for each secret type
			const SECRET_EXPLANATIONS = {
				'username': 'Random, readable string, 8-12 characters, no special characters.',
				'password': 'Minimum 16 characters, includes uppercase, lowercase, numbers, and special characters (!@#$%^&*).',
				'postgres username': 'user_ followed by 12 random alphanumeric characters.',
				'postgres password': 'Minimum 16 characters, includes only alphanumeric characters.',
				'postgres db name': 'db_ followed by 12 random lowercase alphanumeric characters.',
				'jwtsecret 32 hex': 'A 32-character random hex string (0-9, a-f).',
				'jwtsecret 32 base64': 'A 32-character random, URL-safe base64 string.',
				'ANON_KEY': 'A long, base64 string, similar in format to a JWT.',
				'SECRET_KEY_BASE': 'A 128-character random hex string.',
				'SERVICE_ROLE_KEY': 'A long, base64 string, similar in format to a JWT.'
			};
			
			// Character sets for generating secrets
			const LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';
			const UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
			const NUMBERS = '0123456789';
			const SPECIAL_CHARS = '!@#$%^&*';
			const ALPHANUMERIC = LOWERCASE + UPPERCASE + NUMBERS;
			const HEX_CHARS = '0123456789abcdef';
			const ALPHANUMERIC_LOWER = LOWERCASE + NUMBERS;
			const ALPHANUMERIC_ONLY = LOWERCASE + UPPERCASE + NUMBERS;
			
			// Utility functions for generating random strings
			function generateRandomString(length, charset) {
				let result = '';
				const charsetLength = charset.length;
				
				for (let i = 0; i < length; i++) {
					const randomIndex = Math.floor(Math.random() * charsetLength);
					result += charset[randomIndex];
				}
				
				return result;
			}
			
			// Secret generation functions
			function generateUsername() {
				const length = Math.floor(Math.random() * 5) + 8; // 8-12 characters
				return generateRandomString(length, ALPHANUMERIC_ONLY);
			}
			
			function generatePassword() {
				const length = 16;
				const allChars = ALPHANUMERIC + SPECIAL_CHARS;
				
				// Ensure at least one character from each required set
				let password = '';
				password += generateRandomString(1, UPPERCASE);
				password += generateRandomString(1, LOWERCASE);
				password += generateRandomString(1, NUMBERS);
				password += generateRandomString(1, SPECIAL_CHARS);
				
				// Fill the rest randomly
				password += generateRandomString(length - 4, allChars);
				
				// Shuffle the password to avoid predictable patterns
				return password.split('').sort(() => Math.random() - 0.5).join('');
			}
			
			function generatePostgresUsername() {
				return `user_${generateRandomString(12, ALPHANUMERIC_ONLY)}`;
			}
			
			function generatePostgresPassword() {
				return generateRandomString(16, ALPHANUMERIC_ONLY);
			}
			
			function generatePostgresDbName() {
				return `db_${generateRandomString(12, ALPHANUMERIC_LOWER)}`;
			}
			
			function generateJwtSecretHex() {
				return generateRandomString(32, HEX_CHARS);
			}
			
			function generateJwtSecretBase64() {
				// Generate 32 random bytes and encode as base64
				const array = new Uint8Array(32);
				for (let i = 0; i < 32; i++) {
					array[i] = Math.floor(Math.random() * 256);
				}
				return btoa(String.fromCharCode(...array));
			}
			
			function generateAnonKey() {
				// Generate a longer base64 string similar to a JWT
				const array = new Uint8Array(48); // 48 bytes = 64 base64 chars
				for (let i = 0; i < 48; i++) {
					array[i] = Math.floor(Math.random() * 256);
				}
				return btoa(String.fromCharCode(...array));
			}
			
			function generateSecretKeyBase() {
				return generateRandomString(128, HEX_CHARS);
			}
			
			function generateServiceRoleKey() {
				// Generate a longer base64 string similar to a JWT
				const array = new Uint8Array(48); // 48 bytes = 64 base64 chars
				for (let i = 0; i < 48; i++) {
					array[i] = Math.floor(Math.random() * 256);
				}
				return btoa(String.fromCharCode(...array));
			}
			
			function generateAllSecrets() {
				return {
					'username': generateUsername(),
					'password': generatePassword(),
					'postgres username': generatePostgresUsername(),
					'postgres password': generatePostgresPassword(),
					'postgres db name': generatePostgresDbName(),
					'jwtsecret 32 hex': generateJwtSecretHex(),
					'jwtsecret 32 base64': generateJwtSecretBase64(),
					'ANON_KEY': generateAnonKey(),
					'SECRET_KEY_BASE': generateSecretKeyBase(),
					'SERVICE_ROLE_KEY': generateServiceRoleKey()
				};
			}
			
			// Function to render secrets in the UI with tooltips
			function renderSecrets(secrets) {
				const container = document.getElementById('secrets-container');
				let html = '<div class="space-y-3">';
				
				for (const [label, value] of Object.entries(secrets)) {
					const explanation = SECRET_EXPLANATIONS[label] || 'No explanation available.';
					const safeLabel = label.replace(/\s+/g, '-').replace(/[^a-zA-Z0-9-]/g, '');
					
					html += `
						<div class="flex flex-col sm:flex-row sm:items-center gap-2 p-3 bg-base-200 rounded-btn relative group">
							<div class="flex items-center gap-2">
								<span class="font-medium truncate">${label}:</span>
								<button 
									class="btn btn-xs btn-circle btn-ghost tooltip-trigger" 
									aria-label="Show explanation for ${label}"
									data-tooltip="${explanation}"
									data-label="${safeLabel}"
								>
									?
								</button>
							</div>
							<span class="font-mono text-sm break-all flex-1">${value}</span>
							<div 
								id="tooltip-${safeLabel}"
								class="tooltip-content hidden absolute left-0 top-full mt-2 z-10 w-64 p-3 bg-base-100 border border-base-300 rounded-btn shadow-lg text-sm"
								role="tooltip"
							>
								${explanation}
							</div>
						</div>
					`;
				}
				
				html += '</div>';
				container.innerHTML = html;
				
				// Add event listeners for tooltips
				setupTooltipListeners();
			}
			
			// Function to set up tooltip event listeners
			function setupTooltipListeners() {
				const tooltipTriggers = document.querySelectorAll('.tooltip-trigger');
				
				tooltipTriggers.forEach(trigger => {
					const label = trigger.getAttribute('data-label');
					const tooltip = document.getElementById(`tooltip-${label}`);
					
					// Show tooltip on click
					trigger.addEventListener('click', (e) => {
						e.stopPropagation();
						// Hide all other tooltips first
						hideAllTooltips();
						// Show this tooltip
						showTooltip(tooltip);
					});
					
					// Hide tooltip when pressing Escape
					trigger.addEventListener('keydown', (e) => {
						if (e.key === 'Escape') {
							hideTooltip(tooltip);
							trigger.blur();
						}
					});
				});
				
				// Hide tooltips when clicking outside
				document.addEventListener('click', (e) => {
					if (!e.target.closest('.tooltip-trigger') && !e.target.closest('.tooltip-content')) {
						hideAllTooltips();
					}
				});
			}
			
			// Tooltip helper functions
			function showTooltip(tooltip) {
				if (tooltip) {
					tooltip.classList.remove('hidden');
				}
			}
			
			function hideTooltip(tooltip) {
				if (tooltip) {
					tooltip.classList.add('hidden');
				}
			}
			
			function hideAllTooltips() {
				const tooltips = document.querySelectorAll('.tooltip-content');
				tooltips.forEach(tooltip => tooltip.classList.add('hidden'));
			}
			
			// Function to show error messages
			function showError(message) {
				const errorElement = document.getElementById('error-message');
				const errorText = document.getElementById('error-text');
				if (errorText) {
					errorText.textContent = message;
				}
				if (errorElement) {
					errorElement.classList.remove('hidden');
					
					// Hide error after 5 seconds
					setTimeout(() => {
						if (errorElement) {
							errorElement.classList.add('hidden');
						}
					}, 5000);
				}
			}
			
			// Function to show copy confirmation
			function showCopyConfirmation() {
				const confirmation = document.getElementById('copy-confirmation');
				if (confirmation) {
					confirmation.classList.remove('hidden');
					
					// Hide confirmation after 2 seconds
					setTimeout(() => {
						if (confirmation) {
							confirmation.classList.add('hidden');
						}
					}, 2000);
				}
			}
			
			// Generate secrets when button is clicked
			document.getElementById('generate-btn').addEventListener('click', () => {
				try {
					// Hide any previous error messages
					const errorMessage = document.getElementById('error-message');
					if (errorMessage) {
						errorMessage.classList.add('hidden');
					}
					
					// Generate all secrets
					const secrets = generateAllSecrets();
					
					// Render secrets in the UI
					renderSecrets(secrets);
				} catch (error) {
					showError('Failed to generate secrets: ' + error.message);
				}
			});
			
			// Copy secrets to clipboard when button is clicked
			document.getElementById('copy-btn').addEventListener('click', () => {
				try {
					// Hide any previous error messages
					const errorMessage = document.getElementById('error-message');
					if (errorMessage) {
						errorMessage.classList.add('hidden');
					}
					
					// Get all secret elements
					const secretElements = document.querySelectorAll('#secrets-container .flex');
					if (secretElements.length === 0) {
						showError('No secrets to copy. Please generate secrets first.');
						return;
					}
					
					// Format secrets for .env file
					let envContent = '';
					secretElements.forEach(element => {
						const labelElement = element.querySelector('span.font-medium');
						const valueElement = element.querySelector('span.font-mono');
						if (labelElement && valueElement) {
							const label = labelElement.textContent.replace(':', '');
							const value = valueElement.textContent;
							envContent += `${label}=${value}\n`;
						}
					});
					
					// Copy to clipboard
					navigator.clipboard.writeText(envContent)
						.then(() => {
							showCopyConfirmation();
						})
						.catch(err => {
							// Fallback for browsers that don't support clipboard API
							try {
								const textArea = document.createElement('textarea');
								textArea.value = envContent;
								textArea.style.position = 'fixed';
								textArea.style.left = '-999999px';
								textArea.style.top = '-999999px';
								document.body.appendChild(textArea);
								textArea.focus();
								textArea.select();
								const successful = document.execCommand('copy');
								document.body.removeChild(textArea);
								if (successful) {
									showCopyConfirmation();
								} else {
									showError('Failed to copy to clipboard using fallback method');
								}
							} catch (fallbackError) {
								showError('Failed to copy to clipboard: ' + (err.message || fallbackError.message));
							}
						});
				} catch (error) {
					showError('Failed to copy secrets: ' + error.message);
				}
			});
		</script>
	</body>
</html>